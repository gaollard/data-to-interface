{"version":3,"sources":["App.tsx","code.ts","reportWebVitals.ts","index.tsx"],"names":["require","outPath","getType","obj","depth","path","definedPath","currentItem","find","it","inject","name","keys","Object","Array","isArray","property","forEach","key","value","push","beforeSpaces","fill","undefined","join","afterSpaces","typeStr","map","extract","App","editor","output","useState","paths","setPaths","useEffect","window","CodeMirror","fromTextArea","document","getElementById","lineNumbers","mode","theme","on","instance","console","log","getValue","className","id","type","onClick","res","JSON","parse","outer","setValue","content","trigger","QuestionCircleFilled","style","marginLeft","prev","title","dataIndex","span","paddingLeft","index","defaultChecked","MinusOutlined","filter","_","i","removeHandle","cursor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.01d8a89b.chunk.js","sourcesContent":["import React, { CSSProperties, useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { code } from \"./code\";\nimport { Button, Switch, Popover, Input, Row, Col, Table } from \"antd\";\nimport { MinusOutlined, QuestionCircleFilled } from \"@ant-design/icons\";\n\nrequire(\"codemirror/mode/xml/xml\");\nrequire(\"codemirror/mode/jsx/jsx\");\nrequire(\"codemirror/lib/codemirror\");\nrequire(\"codemirror/mode/javascript/javascript\");\n\nlet outPath = [] as { key: string; value: any }[];\n\nfunction getType(\n  obj = {} as { [index: string]: any },\n  depth = 0,\n  path = \"\",\n  definedPath = [] as {\n    path: string;\n    name: string;\n    inject: boolean;\n    extract: boolean;\n  }[]\n): any {\n  const currentItem = definedPath.find((it) => {\n    return it.path === path;\n  });\n\n  if (currentItem?.inject && currentItem.name)\n    return currentItem.name;\n\n  if (['string', 'number', 'boolean'].find(it => typeof obj === it))\n    return typeof obj;\n\n  if (obj === null) return 'null';\n\n  const keys = Object.keys(obj);\n\n  if (Array.isArray(obj)) {\n    return `${getType(obj[0], depth + 1, `${path}.0`, definedPath)}[]`;\n  }\n\n  const property = [] as { key: string; value: string }[];\n\n  keys.forEach((key) => {\n    let value = getType(obj[key], depth + 1, `${path}.${key}`, definedPath) + \";\";\n    property.push({ key, value });\n  });\n\n  const beforeSpaces = new Array((depth + 1) * 4).fill(undefined).join(\" \");\n  const afterSpaces = new Array(depth * 4).fill(undefined).join(\" \");\n\n  const typeStr = `{\\n${property\n    .map((it) => `${beforeSpaces}${it.key}: ${it.value}`)\n    .join(\"\\n\")}\\n${afterSpaces}}`;\n\n  if (currentItem?.extract && currentItem.name) {\n    // 提取子路径作为独立类型\n    outPath.push({\n      key: currentItem.name,\n      value: typeStr,\n    });\n    return currentItem.name;\n  }\n\n  return typeStr;\n}\n\nfunction App() {\n  const [paths, setPaths] = useState([\n    {\n      path: \".wife\",\n      inject: true,\n      extract: false,\n      name: \"Wife\",\n    },\n    {\n      path: \".school.city\",\n      inject: true,\n      extract: false,\n      name: \"My\",\n    },\n    {\n      path: \".school\",\n      extract: true,\n      inject: false,\n      name: \"School\",\n    },\n  ]);\n\n  var editor: any;\n  var output: any;\n\n  useEffect(() => {\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    editor = (window as any).CodeMirror.fromTextArea(\n      document.getElementById(\"code\"),\n      {\n        lineNumbers: true,\n        mode: \"jsx\",\n        theme: \"material\",\n      }\n    );\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    output = (window as any).CodeMirror.fromTextArea(\n      document.getElementById(\"output\"),\n      {\n        lineNumbers: true,\n        mode: \"jsx\",\n        theme: \"material\",\n      }\n    );\n\n    editor.on(\"change\", function (instance: any) {\n      console.log(editor.getValue());\n      console.log(output.getValue());\n    });\n  });\n\n  const handleClick = () => {\n    const res = getType(JSON.parse(editor.getValue()), 0, '', paths);\n    const outer = outPath\n      .map((it) => `interface ${it.key} ${it.value}\\n`)\n      .join(\"\\n\");\n    output.setValue(\n      `// reference\\n${outer} \\n// your type \\ninterface Struct ${res}`\n    );\n    outPath = [];\n  };\n\n  const addHandle = () => {\n    setPaths((prev) => [\n      ...prev,\n      {\n        path: \".\",\n        extract: false,\n        inject: false,\n        name: \"\",\n      },\n    ]);\n  };\n\n  const removeHandle = (index: number) => {\n    setPaths((prev) => prev.filter((_, i) => index !== i));\n  };\n\n  const columns = [\n    {\n      title: \"路径\",\n      dataIndex: \"path\",\n      key: \"path\",\n      span: 7,\n    },\n    {\n      title: \"注入\",\n      dataIndex: \"inject\",\n      key: \"inject\",\n      span: 4,\n    },\n    {\n      title: \"抽离\",\n      dataIndex: \"extract\",\n      key: \"extract\",\n      span: 4,\n    },\n    {\n      title: \"名称\",\n      dataIndex: \"name\",\n      key: \"name\",\n      span: 7,\n    },\n    {\n      title: \"操作\",\n      dataIndex: \"action\",\n      key: \"action\",\n      span: 2,\n      style: { paddingLeft: 20 } as CSSProperties\n    },\n  ];\n\n  return (\n    <div className=\"App\">\n      <div className=\"main\">\n        <div className=\"editor mirror code-mirror\">\n          <textarea id=\"code\">{code}</textarea>\n        </div>\n        <Button type=\"primary\" className=\"run\" onClick={handleClick}>\n          生成类型\n        </Button>\n        <div className=\"editor mirror output-code\">\n          <textarea id=\"output\"></textarea>\n        </div>\n      </div>\n      <div className=\"runner\" id=\"container\">\n        <div className=\"header\">\n          <div className=\"title\">\n            <Popover\n              content={\n                <div>\n                  <div>inject: 注入外部类型</div>\n                  <div>extract: 提取子路径作为独立类型</div>\n                </div>\n              }\n              trigger=\"hover\"\n            >\n              <span>自定义 PATH</span>\n              <QuestionCircleFilled style={{ marginLeft: 10 }} />\n            </Popover>\n            <Button onClick={addHandle}>添加</Button>\n          </div>\n        </div>\n\n        <Row className=\"row-header\">\n          {columns.map((it) => (\n            <Col span={it.span} style={it.style}>{it.title}</Col>\n          ))}\n        </Row>\n\n        {paths.map((it, index) => (\n          <Row className=\"path\">\n            <Col className=\"path-name\" span={7}>\n              <Input value={it.path} />\n            </Col>\n            <Col className=\"column\" span={4}>\n              <Switch defaultChecked={it.inject} />\n            </Col>\n            <Col className=\"column\" span={4}>\n              <Switch defaultChecked={it.extract} />\n            </Col>\n            <Col className=\"column\" span={7}>\n              <Input value={it.name} />\n            </Col>\n            <Col className=\"column col-action\" span={2}>\n              <MinusOutlined onClick={() => removeHandle(index)} style={{ marginLeft: 20, cursor: 'pointer' }} />\n            </Col>\n          </Row>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export const code = `{\n  \"name\": \"frank\",\n  \"skill\": [\n    \"Java\",\n    \"Javascript\"\n  ],\n  \"mother\": {\n    \"name\": \"tony\",\n    \"school\": {\n      \"name\": null\n    }\n  },\n  \"wife\": {\n    \"name\": \"tony\"\n  },\n  \"school\": {\n    \"city\": \"郑州\"\n  }\n}`;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}