{"version":3,"sources":["App1.tsx","code.ts","reportWebVitals.ts","index.tsx"],"names":["require","paths","path","inject","name","extract","outPath","getType","obj","depth","currentItem","find","it","keys","Object","Array","isArray","property","forEach","key","value","push","beforeSpaces","fill","undefined","join","afterSpaces","typeStr","map","App","editor","output","useEffect","window","CodeMirror","fromTextArea","document","getElementById","lineNumbers","mode","theme","on","instance","console","log","getValue","className","id","type","onClick","res","JSON","parse","outer","setValue","content","trigger","QuestionCircleFilled","style","marginLeft","defaultChecked","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.fa45ccb2.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport \"./App1.css\";\nimport { code } from \"./code\";\nimport { Button, Switch, Popover, Input } from \"antd\";\nimport { QuestionCircleFilled } from \"@ant-design/icons\";\n\nrequire(\"codemirror/mode/xml/xml\");\nrequire(\"codemirror/mode/jsx/jsx\");\nrequire(\"codemirror/lib/codemirror\");\nrequire(\"codemirror/mode/javascript/javascript\");\n\nconst paths = [\n  {\n    path: \".wife\",\n    inject: true,\n    name: \"Wife\",\n  },\n  {\n    path: \".school.city\",\n    inject: true,\n    name: \"My\",\n  },\n  {\n    path: \".school\",\n    extract: true,\n    name: \"School\",\n  },\n];\n\nlet outPath = [] as { key: string; value: any }[];\n\nfunction getType(\n  obj = {} as { [index: string]: any },\n  depth = 0,\n  path = \"\"\n): any {\n  const currentItem = paths.find((it) => {\n    return it.path === path;\n  });\n\n  if (currentItem?.inject && currentItem.name) {\n    // 注入外部类型\n    return currentItem.name;\n  }\n\n  if (typeof obj === \"string\" || typeof obj === \"number\") {\n    return typeof obj;\n  }\n\n  const keys = Object.keys(obj);\n\n  if (Array.isArray(obj)) {\n    return `${getType(obj[0], depth + 1, `${path}.0`)}[]`;\n  }\n\n  const property = [] as { key: string; value: string }[];\n\n  keys.forEach((key) => {\n    let value = getType(obj[key], depth + 1, `${path}.${key}`) + \";\";\n    property.push({ key, value });\n  });\n\n  const beforeSpaces = new Array((depth + 1) * 4).fill(undefined).join(\" \");\n  const afterSpaces = new Array(depth * 4).fill(undefined).join(\" \");\n\n  const typeStr = `{\\n${property\n    .map((it) => `${beforeSpaces}${it.key}: ${it.value}`)\n    .join(\"\\n\")}\\n${afterSpaces}}`;\n\n  if (currentItem?.extract && currentItem.name) {\n    // 提取子路径作为独立类型\n    outPath.push({\n      key: currentItem.name,\n      value: typeStr,\n    });\n    return currentItem.name;\n  }\n\n  return typeStr;\n}\n\nfunction App() {\n  var editor: any;\n  var output: any;\n\n  useEffect(() => {\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    editor = (window as any).CodeMirror.fromTextArea(\n      document.getElementById(\"code\"),\n      {\n        lineNumbers: true,\n        mode: \"jsx\",\n        theme: \"material\",\n      }\n    );\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    output = (window as any).CodeMirror.fromTextArea(\n      document.getElementById(\"output\"),\n      {\n        lineNumbers: true,\n        mode: \"jsx\",\n        theme: \"material\",\n      }\n    );\n\n    editor.on(\"change\", function (instance: any) {\n      console.log(editor.getValue());\n      console.log(output.getValue());\n    });\n  });\n\n  const handleClick = () => {\n    const res = getType(JSON.parse(editor.getValue()));\n    const outer = outPath\n      .map((it) => `interface ${it.key} ${it.value}\\n`)\n      .join(\"\\n\");\n    output.setValue(\n      `// reference\\n${outer} \\n// your type \\ninterface Struct ${res}`\n    );\n    outPath = [];\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"main\">\n        <div className=\"editor mirror code-mirror\">\n          <textarea id=\"code\">{code}</textarea>\n        </div>\n        <Button type=\"primary\" className=\"run\" onClick={handleClick}>\n          生成类型\n        </Button>\n        <div className=\"editor mirror output-code\">\n          <textarea id=\"output\"></textarea>\n        </div>\n      </div>\n      <div className=\"runner\" id=\"container\">\n        <div className=\"header\">\n          <div className=\"title\">\n            <Popover\n              content={\n                <div>\n                  <div>inject: 注入外部类型</div>\n                  <div>extract: 提取子路径作为独立类型</div>\n                </div>\n              }\n              trigger=\"hover\"\n            >\n              <span>自定义 PATH</span>\n              <QuestionCircleFilled style={{ marginLeft: 10 }} />\n            </Popover>\n            <Button>添加</Button>\n          </div>\n        </div>\n\n        {paths.map((it) => (\n          <div className=\"path\">\n            <div className=\"path-name\">\n              <Input value={it.path} />\n            </div>\n            <div>\n              <span>inject</span>\n              <Switch defaultChecked={it.inject} />\n            </div>\n            <div>\n              <span>extract</span>\n              <Switch defaultChecked={it.extract} />\n            </div>\n            <Input value={it.name} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export const code = `{\n  \"name\": \"frank\",\n  \"skill\": [\n    \"Java\",\n    \"Javascript\"\n  ],\n  \"mother\": {\n    \"name\": \"tony\",\n    \"school\": {\n      \"name\": \"ZZU\"\n    }\n  },\n  \"wife\": {\n    \"name\": \"tony\"\n  },\n  \"school\": {\n    \"city\": \"郑州\"\n  }\n}`;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App1\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}